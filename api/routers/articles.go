package router

import (
	"api/helpers"
	"api/services"
	"log"
	"net/http"

	"github.com/gorilla/handlers"
	"github.com/gorilla/mux"

	_ "api/docs" // docs is generated by Swag CLI, you have to import it.

	httpSwagger "github.com/swaggo/http-swagger"
)

func homePage(w http.ResponseWriter, r *http.Request) {

	if r.URL.Path != "/" {
		helpers.ErrorHandler(w, r, http.StatusNotFound)
		return
	}

}

// @title Articles API
// @version 1.0
// @description This is an article service for managing articles
// @termsOfService http://swagger.io/terms/
// @contact.name API Support
// @contact.email gdogan3746@gmail.com
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host localhost:8081
// @BasePath /
func HandleRequests() {

	myRouter := mux.NewRouter().StrictSlash(true)
	myRouter.HandleFunc("/", homePage)
	myRouter.HandleFunc("/articles", services.GetAllArticles).Methods(http.MethodGet)
	myRouter.HandleFunc("/article/{id}", services.GetSingleArticle).Methods(http.MethodGet)
	myRouter.HandleFunc("/article", services.CreateNewArticle).Methods(http.MethodPost)
	myRouter.HandleFunc("/article/{id}", services.DeleteArticle).Methods(http.MethodDelete)
	myRouter.HandleFunc("/article/{id}", services.UpdateArticle).Methods(http.MethodPut)

	headersOk := handlers.AllowedHeaders([]string{"X-Requested-With"})
	originsOk := handlers.AllowedOrigins([]string{"*"})
	methodsOk := handlers.AllowedMethods([]string{"GET", "HEAD", "POST", "PUT", "OPTIONS", "DELETE"})

	// start server listen
	// with error handling
	handler := handlers.CORS(originsOk, headersOk, methodsOk)(myRouter)
	myRouter.PathPrefix("/swagger").Handler(httpSwagger.WrapHandler)
	log.Fatal(http.ListenAndServe(":8081", handler))

}
